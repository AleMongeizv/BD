--1) Procedimiento almacenado que permita listar las facturas en un determinado año y un determinado mes





--2) Procedimiento almacenado que permita registrar un nuevo cliente. Se debe tener en cuenta validar el código del distrito




--3) Procedimiento almacenado que permita registrar un nuevo distrito. El código del nuevo distrito debe generarse automáticamente y mostrar un mensaje de
--error si el distrito ya se encuentra registrado en la tabla
CREATE PROCEDURE introducirDistrito @DISTRITO VARCHAR(30)
AS
BEGIN
DECLARE @NUMBER INT = CAST((SELECT TOP 1 SUBSTRING(COD_DIS,2,2) FROM DISTRITO ORDER BY COD_DISC DESC) AS INT)
SET @NUMBER +=1
DECLARE @CODIGO VARCHAR(4) = 'D' +CAST (@NUMBER AS VARCHAR (3))
INSERT INTO DISTRITO VALUES (@CODIGO, @DISTRITO)
END 
ELSE
PRINT 'YA ESTA EL DISTRITO'
END

EXECUTE introducirDistrito 'VATICANO'
GO
CREATE PROCEDURE FACTURAPORAÑO @AÑO INT
AS
BEGIN
SELECT COUNT(*) FROM FACTURA WHERE YEAR (FEC_FAC) = @AÑO
END


--4) Procedimiento almacenado que permita mostrar el total de facturas registradas en un determinado año
CREATE PROCEDURE SP_TOTALFACTURAS(@AÑO INT, @TOTAL INT OUTPUT)
AS
SELECT @TOTAL = COUNT(*)
FROM FACTURA F 
WHERE YER (F.FEC_FAC) = @AÑO
GO

--PRUEBA
DECLARE @T INT, @AÑO INT = 2012

EXEC SP_TOTALFACTURAS @AÑO, @TOTAL, @T OUTPUT
PRINT ' EL TOTAL DE FACTURAS REGISTRADAS EN EL AÑO'
+ CAST


USE RENTCAR
GO
--5) Procedimiento almacenado que permita listar los datos de los clientes, junto con el nombre del distrito.IF OBJECT_ID('LISTADOS') IS NOT NULLBEGIN	DROP PROCEDURE LISTARDATOENDGO--Crear procedimiento almacenadoCREATE PROCEDURE LISTARDATOASBEGIN	SELECT *,D.DES_DIS AS NOMBRE_DISTRITO FROM CLIENTE C INNER JOIN DISTRITO D ON  C.IDE_DIS = D.IDE_DISEND GOEXEC LISTARDATO--6) Procedimientos almacenados que permita dar mantenimiento a la tabla CLIENTESELECT * FROM CLIENTE;GO--Crear el procedimiento de insercion--ALTACREATE PROCEDURE ALTA_CLIENTE(@IDE_CLI VARCHAR(10), @APE_CLI VARCHAR(20), @NOM_CLI VARCHAR(20), @DNI_CLI VARCHAR(9), @TEL_CLI VARCHAR(20), @IDE_DIS VARCHAR(10))ASBEGIN	INSERT INTO CLIENTE (IDE_CLI, APE_CLI, NOM_CLI, DNI_CLI,TEL_CLI, IDE_DIS) VALUES (@IDE_CLI, @APE_CLI, @NOM_CLI,@DNI_CLI,@TEL_CLI, @IDE_DIS);UPDATE CLIENTE SET IDE_CLI = @IDE_CLI, NOM_CLI = @NOM_CLI, APE_CLI = @APE_CLI, TEL_CLI = @TEL_CLI, IDE_DIS = @IDE_DIS;END GO--BAJACREATE PROCEDURE BAJA_CLIENTE(@IDE_CLI VARCHAR(10), @APE_CLI VARCHAR(20), @NOM_CLI VARCHAR(20), @DNI_CLI VARCHAR(9), @TEL_CLI VARCHAR(20), @IDE_DIS VARCHAR(10))ASBEGIN	INSERT INTO CLIENTE (IDE_CLI, APE_CLI, NOM_CLI, DNI_CLI,TEL_CLI, IDE_DIS) VALUES (@IDE_CLI, @APE_CLI, @NOM_CLI,@DNI_CLI,@TEL_CLI, @IDE_DIS);UPDATE CLIENTE SET IDE_CLI = @IDE_CLI, NOM_CLI = @NOM_CLI, APE_CLI = @APE_CLI, TEL_CLI = @TEL_CLI, IDE_DIS = @IDE_DIS;ENDGO--MODIFICACREATE PROCEDURE MODIFICA_CLIENTE(@IDE_CLI VARCHAR(10), @APE_CLI VARCHAR(20), @NOM_CLI VARCHAR(20), @DNI_CLI VARCHAR(9), @TEL_CLI VARCHAR(20), @IDE_DIS VARCHAR(10))ASBEGIN	INSERT INTO CLIENTE (IDE_CLI, APE_CLI, NOM_CLI, DNI_CLI,TEL_CLI, IDE_DIS) VALUES (@IDE_CLI, @APE_CLI, @NOM_CLI,@DNI_CLI,@TEL_CLI, @IDE_DIS);UPDATE CLIENTE SET IDE_CLI = @IDE_CLI, NOM_CLI = @NOM_CLI, APE_CLI = @APE_CLI, TEL_CLI = @TEL_CLI, IDE_DIS = @IDE_DIS;ENDGOEXECUTE ALTA_CLIENTEEXECUTE BAJA_CLIENTEEXECUTE MODIFICA_CLIENTE--7) Procedimiento almacenado que muestre el total de clientes por distritoIF OBJECT_ID('CLIENTEDISTRITO') IS NOT NULLBEGIN	DROP PROCEDURE CLIENTEDISTRITOENDGOCREATE PROCEDURE CLIENTE_DISTRITOASSELECT COUNT(C.IDE_CLI) AS NUMERO_CLIENTES, D.DES_DIS FROM CLIENTE CINNER JOIN DISTRITO D ON C.IDE_DIS = D.IDE_DISGROUP BY D.DES_DISEXECUTE CLIENTE_DISTRITO --8) Procedimiento almacenado que permita mostrar información del detalle de alquiler teniendo en cuenta el número de alquilerIF OBJECT_ID('DETALLE_ALQUILER') IS NOT NULLBEGIN	DROP PROCEDURE DETALLE_ALQUILERENDGOCREATE PROCEDURE DETALLE_ALQUILER
    @numeroAlquiler INT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM DetalleAlquiler WHERE NUM_ALQ = @numeroAlquiler)
    BEGIN    
        SELECT *
        FROM DETALLEALQUILER
        WHERE NUM_ALQ = @numeroAlquiler;
    END
    ELSE
    BEGIN
        PRINT 'El número de alquiler especificado no existe.';
    END
END
EXECUTE DETALLE_ALQUILER 7--9) Procedimiento almacenado que permita mostrar los registros de automóviles de un determinado colorGO
CREATE PROCEDURE AUTOMOVIL_COLOR(@color NVARCHAR(50))
AS
BEGIN
        SELECT *
    FROM AUTOMOVIL
    WHERE COL_AUT = @color;
END
--10) Procedimiento almacenado que muestra el detalle de alquiler de acuerdo al nombre de un determinado clientesIF OBJECT_ID('NOMBRE_CLIENTE') IS NOT NULLBEGIN	DROP PROCEDURE NOMBRE_CLIENTE 	ENDGOCREATE PROCEDURE NOMBRE_CLIENTE( @NOMBRE VARCHAR(20))ASSELECT * FROM DETALLEALQUILER A WHERE A.IDE_CLI IN (SELECT IDE_CLI FROM CLIENTE C WHERE C.NOM_CLI = @NOMBRE);GOEXECUTE NOMBRE_CLIENTE PEPE--11) Procedimiento almacenado que permita listar los alquileres de un determinado año de un registro.IF OBJECT_ID('LISTA_ALQUILER') IS NOT NULLBEGIN 	DROP PROCEDURE LISTA_ALQUILERENDGOCREATE PROCEDURE LISTA_ALQUILER(@AÑO INT)ASSELECT * FROM ALQUILER A WHERE @AÑO = YEAR(A.FEC_ALQ)GOEXECUTE LISTA_ALQUILER 2010
