USE RENTCAR
--1.


--2.Script que permita implementar un cursor donde se impriman con PRINT todos los registros de la tabla DISTRITO. Al ejecutar la sentencia se muestra la siguiente imagen:
DECLARE IMPRIMIR_TABLA CURSOR FOR
SELECT * FROM DISTRITO

OPEN IMPRIMIR_TABLA
DECLARE @ID VARCHAR(10), @NOM VARCHAR(30)
FETCH IMPRIMIR_TABLA INTO @ID, @NOM
PRINT 'CODIGO       NOMBRE'
PRINT'-----------------------'

WHILE @@FETCH_STATUS = 0
BEGIN

PRINT @ID + SPACE(10) + @NOM
FETCH IMPRIMIR_TABLA INTO @ID, @NOM



END;
CLOSE IMPRIMIR_TABLA
DEALLOCATE IMPRIMIR_TABLA

--3.Script que permita implementar un cursor donde se impriman todos los registros de la tabla AUTOMÓVIL dependiendo del color.
DECLARE @COLOR_BUSCADO VARCHAR(10) = 'NEGRO';
DECLARE @MATRICULA VARCHAR(7);
DECLARE @MODELO VARCHAR(30);
DECLARE @COLOR VARCHAR(10);
DECLARE @CONT INT = 0;

DECLARE IMPRIMIR_COCHE CURSOR FOR  
SELECT * FROM AUTOMOVIL WHERE COL_AUT = @COLOR_BUSCADO
OPEN IMPRIMIR_COCHE

FETCH IMPRIMIR_COCHE INTO @MATRICULA,@COLOR , @MODELO
PRINT 'MATRICULA ------ COLOR ------ MODELO'
WHILE @@FETCH_STATUS = 0
BEGIN

PRINT @MATRICULA+ SPACE(6) + @COLOR + SPACE(6) + @MODELO
FETCH IMPRIMIR_COCHE INTO @MATRICULA,@COLOR , @MODELO
SET @CONT +=1;

END
PRINT 'EL NUMERO TOTAL DE COCHES DE COLOR ' + @COLOR_BUSCADO + ' ES :' +CAST(@CONT AS VARCHAR)
CLOSE IMPRIMIR_COCHE
DEALLOCATE IMPRIMIR_COCHE

--4. Script que permita implementar un cursor donde se imprima los clientes por distrito (debes usar dos cursores, uno para recorrer DISTRITO y otro para recorrer CLIENTE).
DECLARE @NOM_DIST VARCHAR(20);
DECLARE @IDE_DIS INT;

DECLARE C_IMPRIMIR_CLIENTE CURSOR FOR
SELECT DES_DIS, IDE_DIS FROM DISTRITO

OPEN C_IMPRIMIR_CLIENTE

FETCH NEXT FROM C_IMPRIMIR_CLIENTE INTO @NOM_DIST, @IDE_DIS
WHILE @@FETCH_STATUS = 0
BEGIN
    PRINT 'NOMBRE DEL DISTRITO = ' + @NOM_DIST
    PRINT 'CODIGO' + SPACE(5) + 'APELLIDOS' + SPACE(5) + 'NOMBRE' + SPACE(5) + 'TELEFONO' + SPACE(5) + 'DISTRITO' + SPACE(5) + 'CORREO'
    PRINT '--------------------------------------------------------------------------------------------------------------------------'

    DECLARE DATOS_CLIENTE CURSOR FOR
    SELECT C.IDE_CLI, C.APE_CLI, C.NOM_CLI, C.TEL_CLI, D.DES_DIS, C.CORREO_CLI
    FROM CLIENTE C
    INNER JOIN DISTRITO D ON C.IDE_DIS = D.IDE_DIS
    WHERE C.IDE_DIS = @IDE_DIS

    DECLARE @IDE_CLI VARCHAR(30), @APE_CLI VARCHAR(30), @NOM_CLI VARCHAR(30), @TEL_CLI VARCHAR(20), @CORREO_CLI VARCHAR(50)

    OPEN DATOS_CLIENTE

    FETCH NEXT FROM DATOS_CLIENTE INTO @IDE_CLI, @APE_CLI, @NOM_CLI, @TEL_CLI, @NOM_DIST, @CORREO_CLI
    WHILE @@FETCH_STATUS = 0
    BEGIN
        PRINT @IDE_CLI + SPACE(5) + @APE_CLI + SPACE(5) + @NOM_CLI + SPACE(5) + @TEL_CLI + SPACE(5) + @NOM_DIST + SPACE(5) + @CORREO_CLI
        FETCH NEXT FROM DATOS_CLIENTE INTO @IDE_CLI, @APE_CLI, @NOM_CLI, @TEL_CLI, @NOM_DIST, @CORREO_CLI
    END

    CLOSE DATOS_CLIENTE
    DEALLOCATE DATOS_CLIENTE

    FETCH NEXT FROM C_IMPRIMIR_CLIENTE INTO @NOM_DIST, @IDE_DIS
END

CLOSE C_IMPRIMIR_CLIENTE
DEALLOCATE C_IMPRIMIR_CLIENTE



--5. Script que permita implementar un cursor donde se imprima los clientes primero, tercero y último.
DECLARE @N1 INT=3
DECLARE C_CLIENTE_SALTAR CURSOR SCROLL FOR 
	SELECT * FROM CLIENTE

OPEN C_CLIENTE_SALTAR

FETCH FIRST FROM C_CLIENTE_SALTAR
FETCH ABSOLUTE @N1 FROM C_CLIENTE_SALTAR
--FETCH ABSOLUTE 3 FROM C_CLIENTE_SALTAR
FETCH LAST FROM C_CLIENTE_SALTAR

CLOSE C_CLIENTE_SALTAR

DEALLOCATE C_CLIENTE_SALTAR
GO

USE RENTCAR
--6. Implementar un trigger que permita mostrar un mensaje cada vez que se inserte o actualice un registro en la tabla ALQUILER.
CREATE TRIGGER TX_INSERTAR_ACTUALIZAR
ON ALQUILER
FOR INSERT, UPDATE
AS
	PRINT 'MENSAJE DISPARADO POR LA INSERCIÓN O ACTUALIZACIÓN DE LA TABLA ALQUILER'

--Probar el Trigger con inserción
INSERT INTO ALQUILER VALUES(10,'08/01/2015', 19.00);

--Probar el Trigger con actualización
UPDATE ALQUILER
	SET FEC_ALQ='10/12/2015'
	WHERE NUM_ALQ=9

SELECT * FROM ALQUILER



--7. Implementar un trigger que permita crear un histórico de los registros insertados en la tabla DETALLEALQUILER, 
--en la cual por cada registro realizado por un cliente se deberá enviar el código del cliente y el total de alquileres realizados 
--por dicho cliente a una nueva tabla llamada DETALLEALQUILERxCLIENTE. Probarlo una vez creado.
CREATE TABLE DETALLEALQUILERxCLIENTE (
    IDE_CLI VARCHAR(5),
    TOTAL_ALQUILERES INT
);
DROP TABLE DETALLEALQUILERxCLIENTE


CREATE TRIGGER TX_FACTURASxCLIENTE
ON DETALLEALQUILER
AFTER INSERT
AS

DECLARE @CLI VARCHAR(30) = (SELECT I.IDE_CLI FROM inserted I);
DECLARE @TOTAL_ALQ INT = (SELECT SUM(A.MON_ALQ) FROM ALQUILER A
	INNER JOIN DETALLEALQUILER D ON A.NUM_ALQ = D.NUM_ALQ
	WHERE D.IDE_CLI = @CLI);

IF EXISTS (SELECT * FROM DETALLEALQUILERxCLIENTE  WHERE IDE_CLI=@CLI)
	UPDATE DETALLEALQUILERxCLIENTE
		SET TOTAL_ALQUILERES=@TOTAL_ALQ
			WHERE IDE_CLI=@CLI
ELSE 
	INSERT INTO DETALLEALQUILERxCLIENTE VALUES (@CLI, @TOTAL_ALQ);

BEGIN TRAN;
	INSERT INTO DETALLEALQUILER VALUES(1, 'CL003', 'GG-654');
	SELECT * FROM DETALLEALQUILER; 
ROLLBACK TRAN;

select * from DETALLEALQUILERxCLIENTE
select * from DETALLEALQUILER where IDE_CLI = 'CL003'
select * from ALQUILER a where a.NUM_ALQ IN (1, 7)


--9. Implementar un trigger que permita controlar la eliminación de un registro de la tabla CLIENTE
--Si el cliente que se quiere eliminar tiene detalles de alquileres registrados, no se permitirá su eliminación mostrando un mensaje, en caso
--contrario, mostrar un mensaje de eliminación correcta.